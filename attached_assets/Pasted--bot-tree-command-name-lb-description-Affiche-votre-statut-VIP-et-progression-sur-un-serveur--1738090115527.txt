@bot.tree.command(name="lb", description="Affiche votre statut VIP et progression sur un serveur")
@app_commands.describe(server="Serveur (T1, T2, O1, H1, E1)")
async def check_lb(interaction: discord.Interaction, server: str):
    """Affiche le statut VIP et la progression d'un joueur"""
    await interaction.response.defer()

    try:
        # Modification pour utiliser un menu dÃ©roulant
        options = [
            discord.SelectOption(label="Tiliwan 1", value="T1"),
            discord.SelectOption(label="Tiliwan 2", value="T2"),
            discord.SelectOption(label="Oshimo", value="O1"),
            discord.SelectOption(label="Herdegrize", value="H1"),
            discord.SelectOption(label="Euro", value="E1")
        ]
        select = discord.ui.Select(options=options, placeholder="SÃ©lectionnez un serveur")

        async def callback(interaction: discord.Interaction):
            server_value = select.values[0]
            await process_lb_request(interaction, server_value)

        select.callback = callback
        await interaction.response.send_message(view=discord.ui.View(select), ephemeral=True)

        async def process_lb_request(interaction: discord.Interaction, server_value:str):
            from leaderboard_status import get_vip_status
            from replit import db

            # VÃ©rifier d'abord si l'utilisateur est interdit
            forbidden_users = db.get("forbidden_vip_users", {})
            if str(interaction.user.id) in forbidden_users:
                status = get_vip_status(interaction.user.id, server_value, 0)
                embed = discord.Embed(
                    title=f"ðŸŽ¯ Statut VIP sur {server_value}",
                    color=discord.Color.gold()
                )
                embed.add_field(
                    name="ðŸ’¬ Message du jour",
                    value=status["message"],
                    inline=False
                )
                await interaction.followup.send(embed=embed)
                return

            # RÃ©cupÃ©rer les donnÃ©es du joueur
            server_data = db.get(f"{server_value}.json", {})
            user_data = server_data.get("utilisateurs", {}).get(str(interaction.user.id), {})

            if not user_data:
                status = get_vip_status(interaction.user.id, server_value, 0)
                embed = discord.Embed(
                    title=f"ðŸŽ¯ Statut VIP sur {server_value}",
                    color=discord.Color.gold()
                )
                embed.add_field(
                    name="ðŸ’¬ Message du jour",
                    value=status["message"],
                    inline=False
                )
                await interaction.followup.send(embed=embed)
                return

            total_bets = int(user_data.get("total_bets", "0 jetons").split(" ")[0])
            status = get_vip_status(interaction.user.id, server_value, total_bets)

            # CrÃ©er l'embed
            embed = discord.Embed(
                title=f"ðŸŽ¯ Statut VIP sur {server_value}",
                color=discord.Color.gold()
            )

            # Ajouter le message humoristique
            embed.add_field(
                name="ðŸ’¬ Message du jour",
                value=status["message"],
                inline=False
            )

            # Ajouter les informations de progression
            embed.add_field(
                name="ðŸ“Š Progression",
                value=f"Niveau VIP actuel : **{status['current_vip']}**\n" +
                      (f"Prochain palier : **VIP {status['current_vip'] + 1}**\n" if status['next_threshold'] else "") +
                      (f"Reste Ã  gagner : **{format_kamas(str(status['remaining']), server_value=='E1')}**" if status['next_threshold'] else "ðŸŽ‰ Niveau maximum atteint !"),
                inline=False
            )

            await interaction.followup.send(embed=embed)

        return
